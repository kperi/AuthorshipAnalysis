WWW 2010 • Demo 
April 26-30 • Raleigh • NC • USA 
Rants: A Framework for Rank Editing and Sharing 
in Web Search 
Byron J. Gao Texas State University-San Marcos 
601 University Drive 
San Marcos, TX, USA, 78666 
bgao@txstate.edu 
ABSTRACT 
With a Wiki-like search interface, users can edit ranks of search results and share the edits with the rest of the world. This is an eﬁective way of personalization, as well as a practice of mass collaboration that allows users to vote for ranking and improve search performance. Currently, there are several ongoing experimentation eﬁorts from the indus- try, e.g., SearchWiki by Google and U Rank by Microsoft. Beyond that, there is little published research on this new search paradigm. In this paper, we make an eﬁort to estab- lish a framework for rank editing and sharing in the context of web search, where we identify fundamental issues and pro- pose principled solutions. Comparing to existing systems, for rank editing, our framework allows users to specify not only relative, but also absolute preferences. For edit sharing, our framework provides enhanced ibility, allowing users to select arbitrarily aggregated views. In addition, edits can be shared among similar queries. We present a prototype system Rants, that implements the framework and provides search services through the Google web search API. Categories and Subject Descriptors: H.3.3 [Informa- tion Systems]: Information Storage and Retrieval { Infor- mation Search and Retrieval 
General Terms: Performance, Design, Algorithms Keywords: Rank editing, Edit sharing, Search interface, Personalization, Mass collaboration, Social search 
1. INTRODUCTION 
Recently, several web search giants are experimenting on a new Wiki-like search interface, where users can edit ranks of search results directly. For example, SearchWiki [3] by Google and U Rank [6] by Microsoft. This new search para- digm is an eﬁective way of search personalization. It is also a practice of mass collaboration at a world-wide scale that allows users to vote for ranking of search results and improve search performance. 
SearchWiki and U Rank are under testing, often returning inconsistent or unintuitive results. It is not revealed what exactly they aim to achieve and what the approaches are. Up to our knowledge, there is no published research under this topic. Thus this paper makes the ﬂrst eﬁort to estab- lish a framework by identifying the fundamental issues and proposing principled solutions for rank editing and sharing. 
Copyright is held by the International World Wide Web Conference Com- mittee (IW3C2). Distribution of these papers is limited to classroom use, and personal use by others. 
WWW 2010, April 26–30, 2010, Raleigh, North Carolina, USA. ACM 978-1-60558-799-8/10/04. 
Joey Jan Texas State University-San Marcos 
601 University Drive 
San Marcos, TX, USA, 78666 
jj1258@txstate.edu 
The proposed framework features extended functionalities beyond SearchWiki and U Rank. For rank editing, users can specify not only relative, but also absolute preferences. For edit sharing, the notion of aggregation is generalized and users can select arbitrarily aggregated views. Beyond shar- ing among users, edits can be transferred to similar queries, which can be considered sharing among queries. 
These extensions generate beneﬂts, as well as non-trivial technical complications. We deployed a prototype system Rants [7], that tackles the challenges and implements the framework, providing web search services through the Google API [5]. Figure 1 illustrates the interface of Rants. 
Rank editing. Existing systems provide two editing op- erations, promotion and demotion, where a logged-in user u can promote (move up) or demote (move down) a search result r for a query q by one or more positions. Let up and down denote the two operations, where up(r;2) means to move r up by 2 positions if possible (it may reach the top and cannot continue). 
How to interpret a move? The user intention behind a move is unfortunately ambiguous. Aggressively, it may mean an assertion for the ranking of all results after the move. Conservatively, it may mean several pairwise prefer- ences for the involving results only. In our framework, we take a conservative approach and make the least inferences from a move. For example, if after up(r;2) by user u for query q, r surpassed r0 and r00, we store two pairs (r; r0) and (r; r00), meaning that for q, user u prefers r to appear before r0 and r00. 
We adopt this least inference principle for the following reasons. Firstly, it generates the least, if not none, ambigu- ity. In the above example, although by the same move dif- ferent users may mean diﬁerently, all of them would mean at least those two pairwise preferences. We do not even infer on the precedence relationship between r0 and r00. Secondly, it well serves the purpose that, given the same list of unedited search results for query q, the same ranking as edited will be restored if the inferred pairwise preferences are respected. 
Based on this interpretation, up(r;2) is equivalent to two consecutive executions of up(r;1). Thus, in Rants, we only allow up(r) and down(r), meaning up(r;1) and down(r;1), indicated by the " and # arrows in Figure 1. This is not a limitation, but an emphasis on primitive functionalities, instead of syntactic sugars, for conceptual clarity. 
The two operations actually map to the same task, a swap of positions of two results. Let r0 and r be two neighboring results where r0 is immediately before r. Both up(r) and down(r0) ﬂre a swap of r0 and r, specifying a preference of 
1245 

========1========

WWW 2010 • Demo 
Specify aggregation:  
You are logged in as test  
         All 
test 
Rants 
 rank editing and sharing  
  Search 
 r 1 
’ ” 
3 
 r 2 
’ ” 
3 
 r 3 
’ ” 
 r 4 
’ ” 
 r 5 
’ ” 
8 
 r 6 
’ ”  6 
 r 7 
’ ” 
 r 8 
’ ” 
 r 9 
’ ” 
 r 10 
’ ” 
Figure 1: Interface of Rants. 
(r; r0). In Rants, this task is implemented by a primitive function swap(r0; r). 
Extended rank editing. Promotion and demotion spec- ify relative preferences. There are often situations where users want to specify absolute preferences as well. For ex- ample, user u may always want to see result r appear among top 3 for query q. This cannot be achieved by relative pref- erences because over time, there would be new results for q taking the top 3 seats whose pairwise preferences w.r.t. r were not speciﬂed and stored. 
Mostly, user u wants to stipulate that result r must appear among top k, instead of not. We use a pair (r; k) to capture this absolute preference. As shown in Figure 1, for each q, k can be entered into the box to the right of the # arrow. In Rants, this operation is implemented by a primitive function anchor(r; k). 
Edit sharing. Rank edits are user preferences that can be aggregated and shared among users. Rants utilizes func- tion aggr(U) to generalize the notion of aggregation. No matter logged in or out, user u can arbitrarily specify U, the set of users whose edits (relative or absolute) are to be used for aggregation. If U = fug, the edits from u herself will be used. If U = All, the (published) edits from all users will be used. If U = ;, the original, unedited search results will be presented without enforcing any stored preferences. 
Suppose a same edit is speciﬂed by a set U0  U of users. Then the edit can be shared if 
jU0j 
jUj 
‚ –ag, where 0 • –ag • 1 is a tunable threshold. 
Edit transfer. Rank editing takes user eﬁort. It is greatly beneﬂcial if we can properly transfer rank edits from a query to its similar ones. For example, if user u edited the results for query \David Dewitt", it is very likely that she wants to reuse the edits for query \David J. Dewitt". Edit transfer can be considered as edit sharing among queries, in contrast to sharing among users. 
Function trans(q) returns a query q0 such that it is ap- propriate to transfer edits for query q0 to query q. In the function, two similarity measures are used. wordSim(q; q0) compares the keywords of q and q0. rankSim(q; q0) com- pares the ranks of search results of q and q0. Both need to 
April 26-30 • Raleigh • NC • USA 
pass their respective thresholds –ws and –rs. Obviously, the bigger the thresholds, the more conservative the transfer. Setting the thresholds to 1 shuts down edit transfer. 
Constraint enforcement. We take stored rank edits as user constraints that need to be respected and enforced in processing query q. In Rants, this is implemented by functions enfor(R) and enfor(A), which enforce a set of relative preferences R and a set of absolute preferences A. R and A are determined by q and a selected aggregation U. 
The enforcement adopts a so-called least modiﬂcation prin- ciple, where as little as possible modiﬂcation is used in en- forcing the constraints, and the degree of modiﬂcation is measured by edit distance between the rankings of search results before and after the enforcement. 
In Rants, consistency of relative preferences are main- tained and they are guaranteed to be completely enforced. To do so for absolute preferences entails tremendous tech- nical complications that signiﬂcantly slow down rank edit- ing and query processing for a minimal gain. Practically, a light-weight best-eﬁort approach can achieve complete en- forcement of absolute preferences in normal cases. 
Technical challenges and contributions. In sum- mary, in this introductory study we consider the following fundamental issues. How to interpret, capture and store user preferences? How to keep them consistent and redundancy- free? How to aggregate them for sharing among users? How to transfer them to similar queries? How to enforce them in processing queries? 
In response to these questions, we construct the following functional primitives: swap(r0; r), anchor(r; k), aggr(U), trans(q), enfor(R) and enfor(A). Their correct and ef- ﬂcient realization generates non-trivial technical challenges. 
Thus, our contributions include the identiﬂcation of fun- damental issues involved in the Wiki-like web search para- digm, the formation of the corresponding functional primi- tives, the provision of solutions to the associated technical challenges, and the implementation of these solutions. 
2. RELATED WORK 
We have not seen published research on rank editing and sharing. However, web search giants Google and Microsoft are recently experimenting on this novel search paradigm through SearchWiki [3] and U Rank [6] respectively. While their approaches are not revealed to public, we use Rants to demonstrate a well-deﬂned framework that features ex- tended functionalities. 
Rank editing can be considered as one way of search per- sonalization. Personalized search allows ﬂne-tuning of search results based on an individual’s preferences or proﬂle. Both Google [2] and Yahoo! [8] provide such services. Tradition- ally, the major source for personalization is search history, which forms a user proﬂle and can be used to inuence all queries from the user. In Rants, ranks of search results can be directly edited, and the edits can be used to inuence limited queries, i.e., the query itself and its similar ones. 
Edit sharing is a mass-collaboration way of improving search performance. It is also related to social search. In contrast to established algorithmic or machine-based ap- proaches, social search determines the relevance of search results by considering the interactions or contributions of users. Example social search engines include Google social search [4] and \community powered" Eurekster Swiki [1]. 
1246 

========2========

WWW 2010 • Demo 
3. ALGORITHM 
In this section, we explain the primitive functions that are used in rank editing, edit sharing, and query processing. 3.1 Rank Editing 
Once a user u is logged in, she can edit the search results for a query q, specifying relative and/or absolute preferences. Since she needs to monitor her own editing process, the view must be chosen as U = fug. 
Let RP and AP be hashes storing all the relative and absolute preferences from u respectively. Then RP(q) and AP(q) indicate a set of relative preferences and a set of ab- solute preferences for q from u. For clarity we do not specify u in the notations. 
Let L(q) = (r1; r2; :::) be the list of search results for query q. For a result r 2 L(q), we use rank(r) to denote the rank of r in L(q). Let L0(q) be the list of unedited original search results. L0(q) may change over time. Some previous results may disappear. Some new ones maybe added. The content and ranking of results may change as well. 
swap(r’, r). The function handles speciﬂcation of a rel- ative preference (r; r0), i.e., rank(r) < rank(r0), for query q. It is ﬂred either by up(r) or down(r0), resulting in a swap of positions of r0 and r in the search results. 
Relative preferences are transitive. E.g., with (r1; r2) and (r2; r3), we can infer (r1; r3). All the preference pairs in RP(q), if consistent, form a partial order. Precisely, it is a strict partial order, a binary relation that is irreexive and transitive, corresponding to a directed acyclic graph (dag). 
Example 1. Let L0(q) = (r1; r2; r3; r4). By swap(r1; r2) and swap(r3; r4), the user specify (r2; r1) and (r4; r3), which form a partial order. We do not infer the pairwise prefer- ences for, e.g., r1 and r4. Thus, both (r2; r1; r4; r3) and (r4; r3; r2; r1) respect the speciﬂed preferences. 
Due to the dynamic nature of search results and user pref- erences, RP(q) may receive inconsistent, conicting prefer- ences that cannot be enforced simultaneously. 
Example 2. At day 1, L0(q) = (r1; r2). swap(r1; r2) adds (r2; r1) to RP(q), which will be enforced in query processing. At day 2, the user changed her mind, and swap(r2; r1) would add (r1; r2) to RP(q), which contradicts with (r2; r1). 
Only consistent user preferences can be completely en- forced. Thus it is essential to maintain the consistency of RP(q). It is also desirable to keep RP(q) redundancy-free for improved enforcement e–ciency. Addition of a pair may generate new inferred preferences that are redundant to ex- isting ones, as demonstrated in the following example. 
Example 3. Let RP(q) = f(r1; r3);(r2; r3)g. swap(r2; r1) adds (r1; r2) to RP(q). Then, (r1; r3) becomes redundant because it can be inferred by (r1; r2) and (r2; r3). 
swap(r0; r) maintains RP(q) as a redundancy-free dag. We omit the algorithmic details due to the space limit. The enforcement of the newly added pair (r; r0) is trivial. 
anchor(r, k). The function handles speciﬂcation of an absolute preference (r; k), i.e., rank(r) • k, for query q. As consistency of AP(q) is not maintained, adding (r; k) is trivial. If (r; k) is already in AP(q), update it. 
April 26-30 • Raleigh • NC • USA 
Inconsistency of AP(q) arises in various cases. For exam- ple, (r;1) 2 AP(q) and (r0;1) 2 AP(q). AP(q) may not be compatible with RP(q) either. For example, (r;1) 2 AP(q) and (r0; r) 2 RP(q). However, since AP(q) is small, such anomalies would not arise in normal cases. Thus to avoid the tremendous technical complications, we do not maintain consistency and compatibility of AP(q). 
After the speciﬂcation of (r; k), we want to enforce it im- mediately. For this purpose, we call a recursive procedure climb(r), which is introduced in Section 3.3. 
3.2 Edit Sharing 
User edits can be shared among users, as well as among similar queries. 
aggr(U). The function performs aggregation of edits for a chosen user set of U, returning RPU and APU, the aggre- gated relative and absolute preferences over U. Although U can be arbitrarily speciﬂed, it must be pre-deﬂned so that RPU and APU can be pre-computed oﬁ-line, instead of dur- ing query processing, for improved response time. 
We calculate RPU as follows. For each query q such that0 
RP(q) 6 = ; for some u 2 U, for each pair (r; r ) in RP(q), let U0  U be the set of users who speciﬂed the pair. If jU0j 
jUj 
‚ –ag, insert (r; r0) into RPU(q), where RPU(q) stores the set of aggregated relative preferences over U for query q. Recall that –ag, 0 • –ag • 1, is a tunable threshold. 
We calculate APU in a similar manner with slight mod- iﬂcation. For each query q such that AP(q) 6 = ; for some u 2 U, for each pair (r; k) specifying a preference on r in AP(q), let U0  U be the set of users who speciﬂed the pair. If 
jU0j 
jUj 
‚ –ag, insert (r;k) into APU(q), where APU(q) stores the set of aggregated absolute preferences over U for query q, and (k) is the averaged k speciﬂcations for r over U0. 
The consistency of RP implies the consistency of RPU. As in AP, the consistency of APU is not maintained. 
trans(q). The function returns a query q0, such that the edits (w.r.t. a chosen aggregation U) for query q0 can be ef- fectively utilized by query q. If none of such q0 can be found, the function returns -1, which means no user constraints will be enforced in processing query q. 
A candidate query q0 must have an entry stored in RPU or APU. If q itself is such a candidate, then q will be re-0 turned. Otherwise, trans(q) searches for some q that is similar enough to q. 
As a candidate, query q0 must also have the properties of wordSim(q; q0) ‚ –ws and rankSim(q; q0) ‚ –rs, where –ws0 
and –rs are tunable thresholds. wordSim(q; q0 ) is a similar- ity measure comparing the keywords of q and q . In trans(q), this comparison is done ﬂrst to eliminate most of the un- qualiﬂed candidates. rankSim(q; q0) is a similarity measure comparing the ranks of search results of q and q0, in partic- ular, L10(q) and L10(q0), the top 10 unedited results for q0 
and q respectively. In the end, trans(q) returns a qualiﬂed candidate q0 with the largest rankSim(q; q0). 
For computing wordSim(q; q0), we treat q and q0 as sets of keywords and use J(q; q0), the Jaccard index for q and q0, to measure their similarity. Speciﬂcally, 
0 J(q; q0) = 
jq \ q j 
jq [ q0j: 
For computing rankSim(q; q0), we have two options. The 
1247 

========3========

WWW 2010 • Demo 
ﬂrst option is J(L10(q); L10(q0)), i.e., the Jaccard index for0 
L10(q) and L10(q ). The second option is a rank-aware similarity measure, the Kendall tau coe–cient [9], a non- parametric statistic used to measure the degree of corre- spondence between two rankings. Speciﬂcally, 
¿(L10(q); L10(q0)) = 
nc ¡ nd 
1n(n 
2 
¡ 1); 
where nc is the number of concordant pairs between L10(q)0 
and L10(q ), and nd is the number of disconcordant pairs. In our case, n = 10, and the denominator is just the total number of pairs. 
To compute rankSim(q; q0), L10(q0) must be previously0 stored. Since it contains unedited results, potentially L10(q ) can be shared by all users for space e–ciency. 
3.3 Query Processing 
Diﬁerent from existing systems, Rants separates editing from viewing, which means one does not need to log in to share published user edits. She only needs to select a view, i.e., a user set U for aggregation. 
In processing query q, trans(q) is called ﬂrst, which re- turns q0. If q0 = ¡1, no stored user constraints need to be en- forced and the unedited result list L0(q) will be presented in-0 
tact. Otherwise, RPU(q ) and APU(q0) are retrieved. They contain the relative and absolute preferences to be enforced on L0(q), the original unedited search results. 
L0(q) is dynamic and changes over time. Potentially, this may cause problems for relative preference enforcement. Suppose (r1; r2) and (r2; r3) are in RPU(q0). It is possible that r2 maybe absent from L0(q). Then we need to make sure that (r1; r3) is enforced. 
A relative preference pair (r; r0) 2 RPU(q0) is applicable if and only if both results are present, i.e., r 2 L0(q) and0 
r 2 L0(q). An absolute preference pair (r; k) 2 APU(q0) is applicable if and only if r 2 L0(q). We use R and A0 
to denote the applicable subsets of RPU(q ) and APU(q0) respectively. Then for enforcement purposes, enfor(R) will be invoked ﬂrst, followed by enfor(A). 
enfor(R). The function enforces the relative preferences in R on L0(q). Since RPU(q0) is consistent, R  RPU(q0) is also consistent and completely enforceable. 
As indicated in Example 1, a partial order can be enforced in diﬁerent ways, which rects the fact that a dag can have many topological orderings. 
In graph theory, a topological ordering of a dag is a linear ordering of its nodes where each node comes before all nodes to which it has outbound edges. It is a total order that is compatible with the partial order. Every dag has one or more topological orderings. 
To comply with the least modiﬂcation principle, we com- pute a topological ordering T for R that is the closest to L0(q). Then we iteratively process the edges in T in order.0 
In more detail, for each (r; r ) 2 T, if r0 is before r in L(q), move r0 down to the position immediately after r. 
In this process, (r0; k) 2 A maybe violated. But we do nothing about it until the next stage. 
enfor(A). The function enforces the absolute preferences in A on LR(q), which is the list of search results returned0 
by enfor(R). As in APU(q ), A may not be consistent. We use a best-eﬁort approach to enforce A as much as we can without violating the already enforced R. 
April 26-30 • Raleigh • NC • USA 
To comely with the least modiﬂcation principle, we sort the results in A according to their orders in LR(q). Then we iteratively process each (r; k) 2 A in order, by invoking climb(r). 
climb(r) is recursive. If rank(r) > k, it moves r up by swapping r and r0. If r0 blocks r, it recursively calls climb(r0). r0 blocks r if (r0; k0) 2 A or (r0; r) 2 R is violated by the planned swapping. climb(r) stops when rank(r) = k, or no swapping can be conducted, in which case all results above r (including r) are blocked. 
4. DEMONSTRATION 
Rants [7] is maintained at a regular desktop PC with In- tel 3.0GHz Duo processor and 4GB memory. It was imple- mented using the Google web search API [5]. For illustration purposes, Rants only retrieves 40 HTML pages from the API for each query. 
Demonstration scenario. As a user, you can visit the Rants URL to test the system. You can either create an account to login, or use the given testing account to login. 
No matter logged in or out, you can specify the set of users whose preferences are to be used for aggregation. In \select search view", choose \All" for all users. To choose one or several users, enter a single user ID or a list of user IDs, e.g., \test" or \test1, test2, test3", in the edit box and click the radio button besides it. By leaving the edit box empty, you choose an aggregation on ;, in which case the original unedited search results will be presented. 
If logged in, you can issue web search queries and edit the results by specifying relative or absolute preferences. You can verify that these preferences are respected the next time you issue the same queries. To ease the comparison, search results are marked with their original, unedited ranks, which you can use as temporary IDs. 
Edit transfer among similar queries is performed regard- less of the login status. However, it is good to login because you need to create the edits to be transferred. For example, you can issue a query \David DeWitt" and edit the results. Then you can issue a similar query \David J. DeWitt" and see how those stored edits for \David DeWitt" are enforced in producing the query results for \David J. DeWitt". 
5. REFERENCES 
[1] Eurekster Swiki. http://www.eurekster.com. 
[2] Google Personalized Search. 
http://googleblog.blogspot.com/2007/02/personally- 
speaking.html. 
[3] Google SearchWiki. 
http://googleblog.blogspot.com/2008/11/searchwiki- 
make-search-your-own.html. 
[4] Google Social Search. 
http://googleblog.blogspot.com/2009/10/introducing- 
google-social-search-i.html. 
[5] Google Web Search API. http://code.google.com/. [6] Microsoft U Rank. 
http://research.microsoft.com/en-us/projects/urank/. [7] Rants. http://dmlab.cs.txstate.edu/rants. 
[8] Yahoo! Personalized Search. http://myweb.yahoo.com/. [9] W. Kruskal. Ordinal measures of association. Journal 
of the American Statistical Association, 
53(284):814{861, 1958. 
1248 

========4========

