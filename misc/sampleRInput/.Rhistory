}
print('')
}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
# write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
# write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:4) {
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
print(means[a-1])
for (b in 1:length(col)) {
print(col[b])
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
print(squared_diffs)
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / counter)
}
print('')
}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
# write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
# write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:4) {
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
for (b in 1:length(col)) {
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / (counter - 1))
}}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
# write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
# write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
std_devs
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:length(col)) {
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
for (b in 1:length(col)) {
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / (counter - 1))
}}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:length(csv)) {
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
for (b in 1:length(col)) {
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / (counter - 1))
}}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
nrows(csv)
nrow(csv)
csv[1,1]
csv[1,2]
csv[2,2]
csv[8,2]
csv[7,2]
csv[1,2]
length(csv[,1]
)
nrow(csv)
csv[1,7]
csv[7,1]
csv[7,2]
new_row <-0
new_row[1]
new_row[2]
new_row[2] <- 0
new_row[2]
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_stats.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:length(csv)) {  # start at 2 to ignore header row
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
for (b in 1:length(col)) {
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / (counter - 1))
}}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:length(csv)) {  # start at 2 to ignore header row
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
for (b in 1:length(col)) {
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / (counter - 1))
}}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_normalized.csv"
csv <- read.csv(paste0(reu_path, fromDir))
###########################
### function calculates the z-score of a value from mean and std_dev of feature
###########################
z_score <- function(mean, std_dev, value) {
z_score <- (value - mean) / std_dev
return(z_score)
}
mean <- 0
std_dev <- 0
value <- 0
num_rows <- nrow(csv)
for (a in 2: num_rows - 2) {  # start at 2 to ignore header row, -2 to ignore mean/std_dev rows
new_row <- 0
row <- csv[a,]
row_length <- length(row)
for (b in 2: row_length) {  # start at 2 to ignore label column
mean <- csv[num_rows - 2, b]
std_dev <- csv[num_rows - 1, b]
value <- col[a, b]
new_value <- z_score(mean, std_dev, value)
new_row[b - 1] <- new_value 
}
new_row_t <- as.matrix(t(new_row))
write.table(new_row_t, patse0(reu_path, toDir), sep = ',', col.names = FALSE)
}
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_normalized.csv"
csv <- read.csv(paste0(reu_path, fromDir))
###########################
### function calculates the z-score of a value from mean and std_dev of feature
###########################
z_score <- function(mean, std_dev, value) {
z_score <- (value - mean) / std_dev
return(z_score)
}
mean <- 0
std_dev <- 0
value <- 0
num_rows <- nrow(csv)
for (a in 2: num_rows - 2) {  # start at 2 to ignore header row, -2 to ignore mean/std_dev rows
new_row <- 0
row <- csv[a,]
row_length <- length(row)
for (b in 2: row_length) {  # start at 2 to ignore label column
mean <- csv[num_rows - 2, b]
std_dev <- csv[num_rows - 1, b]
value <- col[a, b]
new_value <- z_score(mean, std_dev, value)
new_row[b - 1] <- new_value 
}
new_row_t <- as.matrix(t(new_row))
write.table(new_row_t, paste0(reu_path, toDir), sep = ',', col.names = FALSE)
}
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data.csv"
csv <- read.csv(paste0(reu_path, fromDir))
means <- numeric(0)
std_devs <- numeric(0)
for (a in 2:length(csv)) {  # start at 2 to ignore header row
col <- csv[,a]
means[a - 1] <- 0
counter <- 0
for (c in 1:length(col)) {
# print(as.numeric(col[c]))
# print(means[a])
if (!is.na(col[c])) {
means[a - 1] <- means[a - 1] + as.numeric(col[c])
counter <- counter + 1
}
}
means[a - 1] <- means[a - 1] / counter
# print(means[a])
counter <- 0
squared_diffs <- 0
for (b in 1:length(col)) {
if (is.numeric(col[b])) {
squared_diffs <- squared_diffs + (col[b] - means[a - 1]) * (col[b] - means[a - 1])
counter <- counter + 1
}
}
if (length(squared_diffs) == 0) {
std_devs[a - 1] <- NA
} else {
std_devs[a - 1] <- sqrt(squared_diffs / (counter - 1))
}}
means_t <- as.matrix(t(means))
std_devs_t <- as.matrix(t(std_devs))
write.table(means_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
write.table(std_devs_t, paste0(reu_path, toDir), sep = ',', append = TRUE, col.names = FALSE)
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_normalized.csv"
csv <- read.csv(paste0(reu_path, fromDir))
###########################
### function calculates the z-score of a value from mean and std_dev of feature
###########################
z_score <- function(mean, std_dev, value) {
z_score <- (value - mean) / std_dev
return(z_score)
}
mean <- 0
std_dev <- 0
value <- 0
num_rows <- nrow(csv)
for (a in 2: num_rows - 2) {  # start at 2 to ignore header row, -2 to ignore mean/std_dev rows
new_row <- 0
row <- csv[a,]
row_length <- length(row)
for (b in 2: row_length) {  # start at 2 to ignore label column
mean <- csv[num_rows - 2, b]
std_dev <- csv[num_rows - 1, b]
value <- col[a, b]
new_value <- z_score(mean, std_dev, value)
new_row[b - 1] <- new_value 
}
new_row_t <- as.matrix(t(new_row))
write.table(new_row_t, paste0(reu_path, toDir), sep = ',', col.names = FALSE)
}
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_normalized.csv"
csv <- read.csv(paste0(reu_path, fromDir))
###########################
### function calculates the z-score of a value from mean and std_dev of feature
###########################
z_score <- function(mean, std_dev, value) {
z_score <- (value - mean) / std_dev
return(z_score)
}
mean <- 0
std_dev <- 0
value <- 0
num_rows <- nrow(csv)
for (a in 2: num_rows - 2) {  # start at 2 to ignore header row, -2 to ignore mean/std_dev rows
new_row <- 0
row <- csv[a,]
row_length <- length(row)
for (b in 2: row_length) {  # start at 2 to ignore label column
mean <- csv[num_rows - 2, b]
std_dev <- csv[num_rows - 1, b]
value <- col[a, b]
new_value <- z_score(mean, std_dev, value)
new_row[b - 1] <- new_value 
}
new_row_t <- as.matrix(t(new_row))
print(write.table(new_row_t, paste0(reu_path, toDir), sep = ',', col.names = FALSE))
}
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_normalized.csv"
csv <- read.csv(paste0(reu_path, fromDir))
###########################
### function calculates the z-score of a value from mean and std_dev of feature
###########################
z_score <- function(mean, std_dev, value) {
z_score <- (value - mean) / std_dev
return(z_score)
}
mean <- 0
std_dev <- 0
value <- 0
num_rows <- nrow(csv)
for (a in 2: num_rows - 2) {  # start at 2 to ignore header row, -2 to ignore mean/std_dev rows
new_row <- 0
row <- csv[a,]
row_length <- length(row)
for (b in 2: row_length) {  # start at 2 to ignore label column
mean <- csv[num_rows - 2, b]
std_dev <- csv[num_rows - 1, b]
value <- col[a, b]
new_value <- z_score(mean, std_dev, value)
new_row[b - 1] <- new_value 
}
new_row_t <- as.matrix(t(new_row))
print(new_row_t)
write.table(new_row_t, paste0(reu_path, toDir), sep = ',', col.names = FALSE)
}
reu_path <- "C:/Users/Daway Chou-Ren/Documents/REU/"
args <- commandArgs(TRUE)
# fromDir <- args[1]
# toDir <- args[2]
fromDir <- "data/data.csv"
toDir <- "data/data_normalized.csv"
csv <- read.csv(paste0(reu_path, fromDir))
###########################
### function calculates the z-score of a value from mean and std_dev of feature
###########################
z_score <- function(mean, std_dev, value) {
z_score <- (value - mean) / std_dev
return(z_score)
}
mean <- 0
std_dev <- 0
value <- 0
num_rows <- nrow(csv)
for (a in 2: num_rows - 2) {  # start at 2 to ignore header row, -2 to ignore mean/std_dev rows
new_row <- 0
row <- csv[a,]
row_length <- length(row)
for (b in 2: row_length) {  # start at 2 to ignore label column
mean <- csv[num_rows - 2, b]
std_dev <- csv[num_rows - 1, b]
value <- col[a, b]
new_value <- z_score(mean, std_dev, value)
new_row[b - 1] <- new_value 
print(new_row)
}
new_row_t <- as.matrix(t(new_row))
print(new_row_t)
write.table(new_row_t, paste0(reu_path, toDir), sep = ',', col.names = FALSE)
}
x<-'a'
x
